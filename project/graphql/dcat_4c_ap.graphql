# metamodel_version: 1.7.0
enum DatasetThemes
  {
    AGRI
    ECON
    EDUC
    ENER
    ENVI
    GOVE
    HEAL
    INTR
    JUST
    OP_DATPRO
    REGI
    SOCI
    TECH
    TRAN
  }

enum NMRAssayEnum
  {
    CHMO__COLON__0000595
  }

enum PhysicalStateEnum
  {
    SOLID
    CRYSTAL
    LIQUID
    GASEOUS
  }

enum TopLevelMediaTypes
  {
    application
    audio
    example
    font
    haptics
    image
    message
    model
    multipart
    text
    video
  }

type AcquisitionNucleus
  {
    id: Uriorcurie!
    title: String
    description: String
    otherIdentifier: [Identifier]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    hasPart: [AgenticEntity]
    partOf: [AgenticEntity]
    type: DefinedTerm
    rdfType: DefinedTerm
    nucleusOf: Atom!
  }

type Activity implements ClassifierMixin
  {
    id: Uriorcurie!
    title: [String]
    description: [String]
    otherIdentifier: [Identifier]
    hasPart: [Activity]
    hadInputEntity: [Entity]
    hadOutputEntity: [Entity]
    hadInputActivity: [Activity]
    carriedOutBy: [AgenticEntity]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Activity]
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type Agent
  {
    name: [String]!
    type: Concept
  }

type AgenticEntity implements ClassifierMixin
  {
    id: Uriorcurie!
    title: String
    description: String
    otherIdentifier: [Identifier]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    hasPart: [AgenticEntity]
    partOf: [AgenticEntity]
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type AmountOfSubstance
  {
    title: String
    description: String
    value: Float!
    hasQuantityType: DefinedTerm!
    unit: DefinedTerm
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type AnalysisDataset
  {
    accessRights: RightsStatement
    applicableLegislation: [LegalResource]
    conformsTo: [Standard]
    contactPoint: [Kind]
    creator: [Agent]
    datasetDistribution: [Distribution]
    description: [String]!
    documentation: [Document]
    frequency: Frequency
    geographicalCoverage: [Location]
    hasVersion: [Dataset]
    identifier: [String]
    inSeries: [DatasetSeries]
    isReferencedBy: [Resource]
    keyword: [String]
    landingPage: [Document]
    language: [LinguisticSystem]
    modificationDate: Date
    otherIdentifier: [Identifier]
    provenance: [ProvenanceStatement]
    publisher: Agent
    qualifiedAttribution: [Attribution]
    qualifiedRelation: [Relationship]
    relatedResource: [Resource]
    releaseDate: Date
    sample: [Distribution]
    source: [Dataset]
    spatialResolution: Decimal
    temporalCoverage: [PeriodOfTime]
    temporalResolution: Duration
    theme: [Concept]
    title: [String]!
    type: [Concept]
    version: String
    versionNotes: [String]
    id: Uriorcurie!
    isAboutEntity: [EvaluatedEntity]
    isAboutActivity: [EvaluatedActivity]
    wasGeneratedBy: [DataAnalysis]
  }

type AnalysisSourceData
  {
    id: Uriorcurie!
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    hasPart: [Entity]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
    title: String
    description: String
    otherIdentifier: [Identifier]
    wasGeneratedBy: [DataGeneratingActivity]
  }

type Any
  {
    title: String
    description: String
  }

type Atom
  {
    title: String
    description: String
    id: Uriorcurie!
    otherIdentifier: [Identifier]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Entity]
    type: DefinedTerm
    hasPart: [MaterialEntity]
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
    inchi: [InChi]
    inchikey: [InChIKey]
    smiles: [SMILES]
    molecularFormula: [MolecularFormula]
    iupacName: [IUPACName]
    hasMolarMass: [MolarMass]
    rdfType: DefinedTerm!
  }

type Attribution
  {
    title: String
    description: String
  }

type CalibrationPeakShift
  {
    title: String
    description: String
    value: Float!
    hasQuantityType: DefinedTerm!
    unit: DefinedTerm
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type Catalogue
  {
    applicableLegislation: [LegalResource]
    catalogue: [Catalogue]
    creator: Agent
    description: [String]!
    geographicalCoverage: [Location]
    hasDataset: [Dataset]
    hasPart: [Catalogue]
    homepage: Document
    language: [LinguisticSystem]
    licence: LicenseDocument
    modificationDate: Date
    publisher: Agent!
    record: [CatalogueRecord]
    releaseDate: Date
    rights: RightsStatement
    service: [DataService]
    temporalCoverage: [PeriodOfTime]
    themes: [ConceptScheme]
    title: [String]!
  }

type CatalogueRecord
  {
    applicationProfile: [Standard]
    changeType: Concept
    description: [String]
    language: [LinguisticSystem]
    listingDate: Date
    modificationDate: Date!
    primaryTopic: Any!
    sourceMetadata: CatalogueRecord
    title: [String]
  }

type Catalyst implements ChemicalSubstance, Materialistic
  {
    id: Uriorcurie!
    title: String
    description: String
    otherIdentifier: [Identifier]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    hasPart: [AgenticEntity]
    partOf: [AgenticEntity]
    type: DefinedTerm
    rdfType: DefinedTerm
    hasMolarEquivalent: [MolarEquivalent]
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
    hasConcentration: [Concentration]
    hasPhValue: [PHValue]
    composedOf: [ChemicalEntity]
    hasAmount: [AmountOfSubstance]
    hasPercentageOfTotal: [PercentageOfTotal]
  }

type CharacterizedCompound
  {
    title: String
    description: String
    id: Uriorcurie!
    otherIdentifier: [Identifier]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
    hasPart: [MaterialEntity]
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
    inchi: [InChi]
    inchikey: [InChIKey]
    smiles: [SMILES]
    molecularFormula: [MolecularFormula]
    iupacName: [IUPACName]
    hasMolarMass: [MolarMass]
  }

type Checksum
  {
    algorithm: ChecksumAlgorithm!
    checksumValue: HexBinary!
  }

type ChecksumAlgorithm
  {
    title: String
    description: String
  }

type ChemicalEntity
  {
    title: String
    description: String
    id: Uriorcurie!
    otherIdentifier: [Identifier]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
    hasPart: [MaterialEntity]
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
    inchi: [InChi]
    inchikey: [InChIKey]
    smiles: [SMILES]
    molecularFormula: [MolecularFormula]
    iupacName: [IUPACName]
    hasMolarMass: [MolarMass]
  }

type ChemicalProduct
  {
    title: String
    description: String
    id: Uriorcurie!
    otherIdentifier: [Identifier]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
    hasPart: [MaterialEntity]
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
    hasConcentration: [Concentration]
    hasPhValue: [PHValue]
    composedOf: [ChemicalEntity]
    hasMolarEquivalent: [MolarEquivalent]
    hasAmount: [AmountOfSubstance]
    hasPercentageOfTotal: [PercentageOfTotal]
  }

type ChemicalReaction
  {
    id: Uriorcurie!
    title: [String]
    description: [String]
    otherIdentifier: [Identifier]
    hasPart: [Activity]
    hadInputEntity: [Entity]
    hadOutputEntity: [Entity]
    hadInputActivity: [Activity]
    carriedOutBy: [AgenticEntity]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Activity]
    type: DefinedTerm
    rdfType: DefinedTerm
    usedStartingMaterial: [StartingMaterial]
    usedReactant: [Reagent]
    generatedProduct: [ChemicalProduct]
    usedCatalyst: [Catalyst]
    usedSolvent: [DissolvingSubstance]
    hasDuration: Duration
    usedReactor: [Reactor]
    hasTemperature: [Temperature]
    hasPressure: [Pressure]
    hasYield: [Yield]
    hasReactionStep: ChemicalReaction
    relatedResource: [Resource]
  }

interface ChemicalSubstance
  {
    title: String
    description: String
    id: Uriorcurie!
    otherIdentifier: [Identifier]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
    hasPart: [MaterialEntity]
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
    hasConcentration: [Concentration]
    hasPhValue: [PHValue]
    composedOf: [ChemicalEntity]
    hasMolarEquivalent: [MolarEquivalent]
    hasAmount: [AmountOfSubstance]
    hasPercentageOfTotal: [PercentageOfTotal]
  }

interface ClassifierMixin
  {
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type Concentration
  {
    title: String
    description: String
    value: Float!
    hasQuantityType: DefinedTerm!
    unit: DefinedTerm
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type Concept
  {
    preferredLabel: [String]!
    title: String
    description: String
  }

type ConceptScheme
  {
    title: [String]!
    description: String
  }

type DataAnalysis
  {
    id: Uriorcurie!
    title: [String]
    description: [String]
    otherIdentifier: [Identifier]
    hasPart: [Activity]
    hadInputEntity: [Entity]
    hadOutputEntity: [Entity]
    hadInputActivity: [Activity]
    carriedOutBy: [AgenticEntity]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Activity]
    type: DefinedTerm
    rdfType: DefinedTerm
    evaluatedActivity: [EvaluatedActivity]
    realizedPlan: Plan
    occurredIn: Surrounding
    evaluatedEntity: [AnalysisSourceData]
  }

type DataGeneratingActivity
  {
    id: Uriorcurie!
    title: [String]
    description: [String]
    otherIdentifier: [Identifier]
    hasPart: [Activity]
    hadInputEntity: [Entity]
    hadOutputEntity: [Entity]
    hadInputActivity: [Activity]
    carriedOutBy: [AgenticEntity]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Activity]
    type: DefinedTerm
    rdfType: DefinedTerm
    evaluatedEntity: [EvaluatedEntity]
    evaluatedActivity: [EvaluatedActivity]
    realizedPlan: Plan
    occurredIn: Surrounding
  }

type DataService
  {
    accessRights: RightsStatement
    applicableLegislation: [LegalResource]
    conformsTo: [Standard]
    contactPoint: [Kind]
    description: [String]
    documentation: [Document]
    endpointURL: [Resource]!
    endpointDescription: [Resource]
    format: [MediaTypeOrExtent]
    keyword: [String]
    landingPage: [Document]
    licence: LicenseDocument
    publisher: Agent
    servesDataset: [Dataset]
    theme: [Concept]
    title: [String]!
  }

type Dataset
  {
    accessRights: RightsStatement
    applicableLegislation: [LegalResource]
    conformsTo: [Standard]
    contactPoint: [Kind]
    creator: [Agent]
    datasetDistribution: [Distribution]
    description: [String]!
    documentation: [Document]
    frequency: Frequency
    geographicalCoverage: [Location]
    hasVersion: [Dataset]
    identifier: [String]
    inSeries: [DatasetSeries]
    isReferencedBy: [Resource]
    keyword: [String]
    landingPage: [Document]
    language: [LinguisticSystem]
    modificationDate: Date
    otherIdentifier: [Identifier]
    provenance: [ProvenanceStatement]
    publisher: Agent
    qualifiedAttribution: [Attribution]
    qualifiedRelation: [Relationship]
    relatedResource: [Resource]
    releaseDate: Date
    sample: [Distribution]
    source: [Dataset]
    spatialResolution: Decimal
    temporalCoverage: [PeriodOfTime]
    temporalResolution: Duration
    theme: [Concept]
    title: [String]!
    type: [Concept]
    version: String
    versionNotes: [String]
    wasGeneratedBy: [DataGeneratingActivity]!
    id: Uriorcurie!
    isAboutEntity: [EvaluatedEntity]
    isAboutActivity: [EvaluatedActivity]
  }

type DatasetSeries
  {
    applicableLegislation: [LegalResource]
    contactPoint: [Kind]
    description: [String]!
    frequency: Frequency
    geographicalCoverage: [Location]
    modificationDate: Date
    publisher: Agent
    releaseDate: Date
    temporalCoverage: [PeriodOfTime]
    title: [String]!
  }

type DefinedTerm
  {
    id: Uriorcurie!
    title: String
    fromCV: Uriorcurie
  }

type Density
  {
    title: String
    description: String
    value: Float!
    hasQuantityType: DefinedTerm!
    unit: DefinedTerm
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type Device
  {
    id: Uriorcurie!
    title: String
    description: String
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [AgenticEntity]
    type: DefinedTerm
    rdfType: DefinedTerm
    hasPart: [Device]
    otherIdentifier: [Identifier]
  }

type DissolvingSubstance implements ChemicalSubstance, Materialistic
  {
    id: Uriorcurie!
    title: String
    description: String
    otherIdentifier: [Identifier]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    hasPart: [AgenticEntity]
    partOf: [AgenticEntity]
    type: DefinedTerm
    rdfType: DefinedTerm
    hasPercentageOfTotal: [PercentageOfTotal]
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
    hasConcentration: [Concentration]
    hasPhValue: [PHValue]
    composedOf: [ChemicalEntity]
    hasMolarEquivalent: [MolarEquivalent]
    hasAmount: [AmountOfSubstance]
  }

type Distribution
  {
    accessURL: [Resource]!
    accessService: [DataService]
    applicableLegislation: [LegalResource]
    availability: Concept
    byteSize: NonNegativeInteger
    checksum: Checksum
    compressionFormat: MediaType
    description: [String]
    documentation: [Document]
    downloadURL: [Resource]
    format: MediaTypeOrExtent
    hasPolicy: Policy
    language: [LinguisticSystem]
    licence: LicenseDocument
    linkedSchemas: [Standard]
    mediaType: MediaType
    modificationDate: Date
    packagingFormat: MediaType
    releaseDate: Date
    rights: RightsStatement
    spatialResolution: Decimal
    status: Concept
    temporalResolution: Duration
    title: [String]
  }

type Document
  {
    id: Uriorcurie!
    title: String
    description: String
  }

type Entity implements ClassifierMixin
  {
    title: String
    description: String
    id: Uriorcurie!
    otherIdentifier: [Identifier]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    hasPart: [Entity]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type EvaluatedActivity
  {
    id: Uriorcurie!
    title: [String]
    description: [String]
    hasPart: [Activity]
    hadInputEntity: [Entity]
    hadOutputEntity: [Entity]
    hadInputActivity: [Activity]
    carriedOutBy: [AgenticEntity]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Activity]
    type: DefinedTerm
    rdfType: DefinedTerm
    otherIdentifier: [Identifier]
  }

type EvaluatedEntity
  {
    id: Uriorcurie!
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    hasPart: [Entity]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
    wasGeneratedBy: [Activity]
    title: String
    description: String
    otherIdentifier: [Identifier]
  }

type Frequency
  {
    title: String
    description: String
  }

type Geometry
  {
    title: String
    description: String
  }

type Identifier
  {
    notation: String!
    title: String
    description: String
  }

type InChi
  {
    title: String
    description: String
    value: String!
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type InChIKey
  {
    title: String
    description: String
    value: String!
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type IUPACName
  {
    title: String
    description: String
    value: String!
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type Kind
  {
  }

type Laboratory
  {
    title: String
    description: String
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type LegalResource
  {
    id: Uriorcurie!
    title: String
    description: String
  }

type LicenseDocument
  {
    type: [Concept]
    id: Uriorcurie!
    title: String
    description: String
  }

type LinguisticSystem
  {
    title: String
    description: String
  }

type Location
  {
    bbox: String
    centroid: String
    geometry: Geometry
  }

type Mass
  {
    title: String
    description: String
    value: Float!
    hasQuantityType: DefinedTerm!
    unit: DefinedTerm
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type MaterialEntity implements Materialistic
  {
    title: String
    description: String
    id: Uriorcurie!
    otherIdentifier: [Identifier]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
    hasPart: [MaterialEntity]
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
  }

interface Materialistic
  {
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
  }

type MaterialSample implements Materialistic
  {
    id: Uriorcurie!
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    hasPart: [Entity]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
    wasGeneratedBy: [Activity]
    title: String
    description: String
    otherIdentifier: [Identifier]
    derivedFrom: Entity
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
  }

type MediaType
  {
    title: String
    description: String
  }

type MediaTypeOrExtent
  {
    title: String
    description: String
  }

type MolarEquivalent
  {
    title: String
    description: String
    value: Float!
    hasQuantityType: DefinedTerm!
    unit: DefinedTerm
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type MolarMass
  {
    title: String
    description: String
    value: Float!
    hasQuantityType: DefinedTerm!
    unit: DefinedTerm
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type MolecularFormula
  {
    title: String
    description: String
    value: String!
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type NMRAnalysisDataset
  {
    accessRights: RightsStatement
    applicableLegislation: [LegalResource]
    conformsTo: [Standard]
    contactPoint: [Kind]
    creator: [Agent]
    datasetDistribution: [Distribution]
    description: [String]!
    documentation: [Document]
    frequency: Frequency
    geographicalCoverage: [Location]
    hasVersion: [Dataset]
    identifier: [String]
    inSeries: [DatasetSeries]
    isReferencedBy: [Resource]
    keyword: [String]
    landingPage: [Document]
    language: [LinguisticSystem]
    modificationDate: Date
    otherIdentifier: [Identifier]
    provenance: [ProvenanceStatement]
    publisher: Agent
    qualifiedAttribution: [Attribution]
    qualifiedRelation: [Relationship]
    relatedResource: [Resource]
    releaseDate: Date
    sample: [Distribution]
    source: [Dataset]
    spatialResolution: Decimal
    temporalCoverage: [PeriodOfTime]
    temporalResolution: Duration
    theme: [Concept]
    title: [String]!
    type: [Concept]
    version: String
    versionNotes: [String]
    id: Uriorcurie!
    isAboutActivity: [EvaluatedActivity]
    wasGeneratedBy: [NMRSpectralAnalysis]
    isAboutEntity: [NMRSample]
  }

type NMRSample
  {
    id: Uriorcurie!
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    hasPart: [Entity]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
    wasGeneratedBy: [Activity]
    title: String
    description: String
    otherIdentifier: [Identifier]
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
    hasConcentration: [Concentration]
    hasPhValue: [PHValue]
    hasMolarEquivalent: [MolarEquivalent]
    hasAmount: [AmountOfSubstance]
    hasPercentageOfTotal: [PercentageOfTotal]
    composedOf: [CharacterizedCompound]!
    derivedFrom: Entity
  }

type NMRSampleTemperature
  {
    title: String
    description: String
    value: Float!
    hasQuantityType: DefinedTerm!
    unit: DefinedTerm
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type NMRSolvent
  {
    id: Uriorcurie!
    title: String
    description: String
    otherIdentifier: [Identifier]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    hasPart: [AgenticEntity]
    partOf: [AgenticEntity]
    type: DefinedTerm
    rdfType: DefinedTerm
    hasPercentageOfTotal: [PercentageOfTotal]
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
    hasConcentration: [Concentration]
    hasPhValue: [PHValue]
    composedOf: [ChemicalEntity]
    hasMolarEquivalent: [MolarEquivalent]
    hasAmount: [AmountOfSubstance]
  }

type NMRSpectralAnalysis
  {
    id: Uriorcurie!
    title: [String]
    description: [String]
    otherIdentifier: [Identifier]
    hasPart: [Activity]
    hadInputEntity: [Entity]
    hadOutputEntity: [Entity]
    hadInputActivity: [Activity]
    carriedOutBy: [AgenticEntity]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Activity]
    type: DefinedTerm
    rdfType: DefinedTerm
    evaluatedActivity: [EvaluatedActivity]
    realizedPlan: Plan
    occurredIn: Surrounding
    evaluatedEntity: [NMRSpectrum]
  }

type NMRSpectrometer
  {
    id: Uriorcurie!
    title: String
    description: String
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [AgenticEntity]
    type: DefinedTerm
    rdfType: DefinedTerm
    hasPart: [Device]
    otherIdentifier: [Identifier]
    hasProtonFrequency: [NominalProtonFrequency]
  }

type NMRSpectroscopy
  {
    id: Uriorcurie!
    title: [String]
    description: [String]
    otherIdentifier: [Identifier]
    hasPart: [Activity]
    hadInputEntity: [Entity]
    hadOutputEntity: [Entity]
    hadInputActivity: [Activity]
    carriedOutBy: [AgenticEntity]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Activity]
    type: DefinedTerm
    evaluatedActivity: [EvaluatedActivity]
    realizedPlan: Plan
    occurredIn: Surrounding
    usedSpectrometer: [NMRSpectrometer]!
    usedSolvent: [NMRSolvent]!
    usedPulseSequence: PulseSequence!
    usedNumberOfScans: NumberOfScans
    usedSampleTemperature: NMRSampleTemperature
    probesNucleus: [AcquisitionNucleus]!
    usedCalibrationCompound: [ShiftCalibrationCompound]
    usedReferenceCompound: [ShiftReferenceCompound]
    evaluatedEntity: [NMRSample]!
    rdfType: DefinedTerm!
  }

type NMRSpectrum
  {
    id: Uriorcurie!
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    hasPart: [Entity]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
    title: String
    description: String
    otherIdentifier: [Identifier]
    wasGeneratedBy: [NMRSpectroscopy]
  }

type NominalProtonFrequency
  {
    title: String
    description: String
    value: Float!
    hasQuantityType: DefinedTerm!
    unit: DefinedTerm
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type NumberOfScans
  {
    title: String
    description: String
    value: Float!
    hasQuantityType: DefinedTerm!
    unit: DefinedTerm
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type PercentageOfTotal
  {
    title: String
    description: String
    value: Float!
    hasQuantityType: DefinedTerm!
    unit: DefinedTerm
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type PeriodOfTime
  {
    beginning: TimeInstant
    end: TimeInstant
    endDate: Date
    startDate: Date
    title: String
    description: String
  }

type PHValue
  {
    title: String
    description: String
    value: Float!
    hasQuantityType: DefinedTerm!
    unit: DefinedTerm
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type Plan implements ClassifierMixin
  {
    title: String
    description: String
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type Policy
  {
    title: String
    description: String
  }

interface Polymer
  {
    title: String
    description: String
    id: Uriorcurie!
    otherIdentifier: [Identifier]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
    hasPart: [MaterialEntity]
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
    hasConcentration: [Concentration]
    hasPhValue: [PHValue]
    composedOf: [ChemicalEntity]
    hasMolarEquivalent: [MolarEquivalent]
    hasAmount: [AmountOfSubstance]
    hasPercentageOfTotal: [PercentageOfTotal]
  }

type PolymerSample implements Polymer
  {
    id: Uriorcurie!
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    hasPart: [Entity]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
    wasGeneratedBy: [Activity]
    title: String
    description: String
    otherIdentifier: [Identifier]
    derivedFrom: Entity
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
    hasConcentration: [Concentration]
    hasPhValue: [PHValue]
    composedOf: [ChemicalEntity]
    hasMolarEquivalent: [MolarEquivalent]
    hasAmount: [AmountOfSubstance]
    hasPercentageOfTotal: [PercentageOfTotal]
  }

type Pressure
  {
    title: String
    description: String
    value: Float!
    hasQuantityType: DefinedTerm!
    unit: DefinedTerm
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type ProvenanceStatement
  {
    title: String
    description: String
  }

type PulseSequence
  {
    title: String
    description: String
    value: String!
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type QualitativeAttribute implements ClassifierMixin
  {
    title: String
    description: String
    value: String!
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type QuantitativeAttribute implements ClassifierMixin
  {
    title: String
    description: String
    value: Float!
    hasQuantityType: DefinedTerm!
    unit: DefinedTerm
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type Reactor implements Materialistic
  {
    id: Uriorcurie!
    title: String
    description: String
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [AgenticEntity]
    type: DefinedTerm
    rdfType: DefinedTerm
    hasPart: [Device]
    otherIdentifier: [Identifier]
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
  }

type Reagent
  {
    title: String
    description: String
    id: Uriorcurie!
    otherIdentifier: [Identifier]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
    hasPart: [MaterialEntity]
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
    hasConcentration: [Concentration]
    hasPhValue: [PHValue]
    composedOf: [ChemicalEntity]
    hasAmount: [AmountOfSubstance]
    hasPercentageOfTotal: [PercentageOfTotal]
    hasMolarEquivalent: [MolarEquivalent]
  }

type Relationship
  {
    hadRole: [Role]!
    relation: [Resource]!
  }

type Resource
  {
    id: Uriorcurie!
    title: String
    description: String
  }

type RightsStatement
  {
    title: String
    description: String
  }

type Role
  {
    title: String
    description: String
  }

type ShiftCalibrationCompound
  {
    title: String
    description: String
    id: Uriorcurie!
    otherIdentifier: [Identifier]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
    hasPart: [MaterialEntity]
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
    inchi: [InChi]
    inchikey: [InChIKey]
    smiles: [SMILES]
    molecularFormula: [MolecularFormula]
    iupacName: [IUPACName]
    hasMolarMass: [MolarMass]
    hasCalibrationShift: [CalibrationPeakShift]
  }

type ShiftReferenceCompound
  {
    title: String
    description: String
    id: Uriorcurie!
    otherIdentifier: [Identifier]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
    hasPart: [MaterialEntity]
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
    inchi: [InChi]
    inchikey: [InChIKey]
    smiles: [SMILES]
    molecularFormula: [MolecularFormula]
    iupacName: [IUPACName]
    hasMolarMass: [MolarMass]
    hasCalibrationShift: [CalibrationPeakShift]
  }

type SMILES
  {
    title: String
    description: String
    value: String!
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type Software
  {
    id: Uriorcurie!
    title: String
    description: String
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [AgenticEntity]
    type: DefinedTerm
    rdfType: DefinedTerm
    hasPart: [Software]
    otherIdentifier: [Identifier]
  }

type Standard
  {
    title: String
    description: String
  }

type StartingMaterial
  {
    title: String
    description: String
    id: Uriorcurie!
    otherIdentifier: [Identifier]
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
    hasPart: [MaterialEntity]
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
    hasConcentration: [Concentration]
    hasPhValue: [PHValue]
    composedOf: [ChemicalEntity]
    hasAmount: [AmountOfSubstance]
    hasPercentageOfTotal: [PercentageOfTotal]
    hasMolarEquivalent: [MolarEquivalent]
  }

type SubstanceSample implements ChemicalSubstance
  {
    id: Uriorcurie!
    hasQualitativeAttribute: [QualitativeAttribute]
    hasQuantitativeAttribute: [QuantitativeAttribute]
    hasPart: [Entity]
    partOf: [Entity]
    type: DefinedTerm
    rdfType: DefinedTerm
    wasGeneratedBy: [Activity]
    title: String
    description: String
    otherIdentifier: [Identifier]
    derivedFrom: Entity
    alternativeLabel: String
    hasPhysicalState: PhysicalStateEnum
    hasTemperature: [Temperature]
    hasMass: [Mass]
    hasVolume: [Volume]
    hasDensity: [Density]
    hasPressure: [Pressure]
    hasConcentration: [Concentration]
    hasPhValue: [PHValue]
    composedOf: [ChemicalEntity]
    hasMolarEquivalent: [MolarEquivalent]
    hasAmount: [AmountOfSubstance]
    hasPercentageOfTotal: [PercentageOfTotal]
  }

type SupportiveEntity
  {
    title: String
    description: String
  }

type Surrounding implements ClassifierMixin
  {
    title: String
    description: String
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type Temperature
  {
    title: String
    description: String
    value: Float!
    hasQuantityType: DefinedTerm!
    unit: DefinedTerm
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type TimeInstant
  {
    title: String
    description: String
  }

type Volume
  {
    title: String
    description: String
    value: Float!
    hasQuantityType: DefinedTerm!
    unit: DefinedTerm
    type: DefinedTerm
    rdfType: DefinedTerm
  }

type Yield
  {
    title: String
    description: String
    value: Float!
    hasQuantityType: DefinedTerm!
    unit: DefinedTerm
    type: DefinedTerm
    rdfType: DefinedTerm
  }
